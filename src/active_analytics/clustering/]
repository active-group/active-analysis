(ns active-analytics.clustering.pic
  (:require [uncomplicate.neanderthal.core :refer :all]
            [uncomplicate.neanderthal.native :refer :all])
  (:import org.nd4j.linalg.api.ndarray.INDArray))

(defn affinity-matrix
  [xs similarity-fn]
  (let [n (count xs)]
    (map-indexed (fn [i x]
                   )
                 xs)))

(defn iterate
  [affinity-matrix v]
  (let [v-new (mv affinity-matrix v)
        norm (nrm1 v-new)]
    (scal norm v-new)))

(defn pic
  [affinity-matrix k v-0 max-number-of-iterations threshold]
  (loop [i 0
         v v-0]
    (let [v-new (iterate affinity-matrix v)]
      (if (or (>= i max-number-of-iterations)
              (< (nrm1 ()) threshold))
        v-new
        (recur (inc i) v-new)))))

(-(dv [2.4 -1.1])
  (dv [0.4 3.2]))